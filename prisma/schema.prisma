// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model customer {
  nik      String @id
  nama     String
  alamat   String
  kota     String
  provinsi String
  no_telp  String

  pesanan pesanan[]

}

model bahan {
  id_bahan   Int    @id @default(autoincrement())
  jenis      String
  nama_bahan String
  alias      String
  kode_bahan String
  harga      Int
  satuan     String
}

model kota{
  id_kota Int @id @default(autoincrement())
  nama_kota String
  provinsi String
}

enum Status {
  pending
  save
}

model pesanan {
  id_pesanan  Int      @id @default(autoincrement())
  id_pengenal String   
  customer_id String
  jenis       String
  nama_bahan  String
  harga_bahan Int
  jumlah      Int    
  ukuran      String?
  Panjang     Int?
  Lebar       Int?
  total_harga Int
  date        DateTime @default(now()) 
  status      Status   @default(pending)

  customer    customer @relation(fields: [customer_id], references: [nik])
}

model ordersatuan {
  id_pesanan  Int      @id @default(autoincrement())
  jenis       String
  nama_bahan  String
  harga_bahan Int
  jumlah      Int
  ukuran      String?     
  Panjang     Int?
  Lebar       Int?
  total_harga Int
  date        DateTime @default(now()) 
  status      Status   @default(pending)
}


model account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user user @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
model user {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password      String?
  role          String
  image         String?
  accounts      account[]
  sessions      session[]
}
 
model verificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}